[DEFAULT]
# Specify the experiments to run. Each of these should be a subrirectory under 
# the current working directorry and should have a file inside named either 
# profile.txt or profile.txt.gz containing the profile data.
experiments = tau_3hr, tau_15hr_callgraph
# If this is set, do not analyze/add any subroutines for the current node 
# once the cummulative exclusive_percent value reaches this value.
# Setting this can greatly decrease run time (e.g. runtime redueced from
# 2 minutes to 22 seconds on 2k node NMM-B run)
exclusive_percent_optimization_threshold = 98.5
# Specify which figures to generate. There should be a section below for each of these.
figures = compute_stacked_exclTime
##
# Default settings for plot configs
##
# How many subroutines to include in plot
num_subroutines = 7
# What metric to use to sort subroutines when deciding which subroutines
# to include in the plot(s)
sort_metric = %(param_to_plot)s
# When sorting, do we want to sort in descending order of values (such that 
# subroutines with the highest values are prioritized for plotting)?
sort_descending = yes


[compute_stacked_exclTime]
type = stacked_bar
outfile = compute_stacked.png
param_to_plot = exclusive_time
role_id = compute
role_names = compute
num_subroutines = 6
subroutines_of_interest = MPI_Wait(), MPI_Finalize(), MPI_Allreduce(), module_dynamics_routines_mp_adv1_, MODULE_BL_MYJPBL::MYJPBL
operation = numpy.mean
min_values = inclusive_percent:1, exclusive_time:100

[io_stacked_exclTime]
type = stacked_bar
outfile = io_stacked.png
role_id = io
role_names = io_master, io_server
num_subroutines = 5
param_to_plot = exclusive_time
subroutines_of_interest = MPI_Recv(), MPI_Finalize(), MODULE_WRITE_GRID_COMP::WRITE_RUN 
operation = numpy.mean
legend = yes

[FIGURE_TEMPLATE]
##
# NOTE: Any settings in [DEFAULT] will be inherited by all plot configs if they
# are not overriden
##
# Type of figure. Supported: stacked_bar
type = stacked_bar
# Name of output file
outfile = filename.png
# Internal name assigned to the role, which may comprise multiple roles
role_id = io
# Name of nodes' roles to include. (These are the values in node2roleDict)
role_names = quilt_master, quilt_server
# Number of subroutines to include in the plot. This is superceded by 
# subroutines_of_interest  (.e.g if there are 5 subroutines there, they wil all
# be included
# ** NOTE : This number will be subtracted from the length of subrs_of_interest,
#           but if one of the subrs specified in subrs_of_interest is not present, the
#           will be no error - so less subrs will be processed **
num_subroutines = 4
# Parameter of the subroutine to use for the plot. Supported: inclusive_time, 
# inclusive_percent, exclusive_time, exclusive_percent, num_calls
param_to_plot = exclusive_percent
# Subroutines of particular interest.
#  # TODO : Some have '()' some do not (in profile.txt). Also, some times there is a callgraph
# other times there is not. Implement a user-friendly way of dealing with this.
subroutines_of_interest = MPI_Receive(), MPI_Wait()
# Do we want a legend?
legend = yes

#TODO : Thresholds - minThresh , maxThresh (not yet implemented in code)
